#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('myapp:server');
const http = require('http');
const dbconnection = require('../models/initModels');


const port = 3000;

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
server.on('error', onError);
server.on('listening', onListening);

dbconnection.sequelize.sync({alter: true})
  .then(()=>{
    console.log("Tables have been synchronized!");
    server.listen(port);
  })
  .catch(err => console.log(err));

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

async function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
